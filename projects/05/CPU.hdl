// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16    (a = instruction, b = ALUout, sel = instruction[15], out = inputA);
    Not      (in = instruction[15], out = notinstruction);
    Or       (a = notinstruction, b = instruction[5], out = loadA);
    ARegister(in = inputA, load = loadA, out = Aout, out[0..14] = addressM);	

    Mux16    (a = Aout, b = inM, sel = instruction[12], out = inputALU);
    
    And      (a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = ALUout, load = loadD, out = Dout);	   

    ALU      (x = Dout, y = inputALU, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, zr = zr, ng = ng, out = outM);

    And      (a = instruction[15], b = instruction[3], out = writeM);

    DMux8Way (in = true, sel = instruction[0..2], b = b, c = c, d = d, e = e, f = f, g = g, h = load7);

	Not      (in = ng, out = notng);
	Not      (in = zr, out = notzr);
    And      (a = notzr, b = notng, out = notzrandnotng);
    Or       (a = zr, b = ng, out = zrorng);

    And      (a = b, b = notzrandnotng, out = load1);
    And      (a = c, b = zr, out = load2);
    And      (a = d, b = notng, out = load3);
    And      (a = e, b = ng, out = load4);
    And      (a = f, b = notzr, out = load5);
    And      (a = g, b = zrorng, out = load6);

    Or8Way   (in[0] = false, in[1] = load1, in[2] = load2, in[3] = load3, in[4] = load4, in[5] = load5, in[6] = load6, in[7] = load7, out = loadornot);
    And      (a = loadornot, b = instruction[15], out = load);

    PC       (in = Aout, load = load, inc = true, reset = reset, out[0..14] = pc);
}